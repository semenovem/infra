#!/bin/sh

#
# стартовая настройка
#

ROOT=$(dirname "$(echo "$0" | grep -E "^/" -q && echo "$0" || echo "$PWD/${0#./}")")
LIB_DIR="${ROOT}/../../_lib/"
. "${LIB_DIR}/core.sh" || exit 1
. "${LIB_DIR}/role.sh" || exit 1

ADDITIONAL_BIN_DIRS=
USER_PROFILE_FILE=
INFRA_PROFILE_FILE="${__CORE_STATE_DIR__}/profile.sh"
BIN_DIR="$(dirname "$ROOT")"
BIN_DIR="$(dirname "$BIN_DIR")"

add_dirs() {
  ADDITIONAL_BIN_DIRS="${ADDITIONAL_BIN_DIRS} $*"
}

# ----------------------------------------------------------------
# Тип системы
if [ -f "${HOME}/.bashrc" ]; then
  USER_PROFILE_FILE="${HOME}/.bashrc"
  add_dirs "linux"
elif [ -f "${HOME}/.zshrc" ]; then
  USER_PROFILE_FILE="${HOME}/.zshrc"
  add_dirs "macos"
else
  __err__ "User profile file does not exist (eg .bashrc or .zshrc) '$USER_PROFILE_FILE'"
  exit 1
fi

# ----------------------------------------------------------------
# Выбрать роль устройства
ROLE=$(__core_role_get__)
if [ $? -ne 0 ]; then
  sh "${ROOT}/set-role.sh"
  ROLE=$(__core_role_get__)
  [ $? -ne 0 ] && __err__ "Device role not selected" && exit 1
fi

case "$ROLE" in
"$__CORE_ROLE_MINI_SERVER_CONST__") add_dirs "roles/mini_server" ;;
"$__CORE_ROLE_PROXY_SERVER_CONST__") add_dirs "roles/proxy_server" ;;
"$__CORE_ROLE_HOME_SERVER_CONST__" | "$__CORE_ROLE_STANDBY_SERVER_CONST__") add_dirs "roles/home_server" ;;
"$__CORE_ROLE_WORKSTATION_CONST__") add_dirs "roles/workstation" ;;
esac

# ----------------------------------------------------------------
# Создать файл профиля инфраструктуры
{
  echo "#!/bin/bash"
  echo "# Autogenerated file infrastructure profile"
  echo
  echo "# bin directory:"

  dirs="\${__INFRA_BIN__}"
  echo "## ${BIN_DIR}"

  # shellcheck disable=SC2068
  for dir in $ADDITIONAL_BIN_DIRS; do
    echo "## ${BIN_DIR}/$dir"
    dirs="${dirs}:\${__INFRA_BIN__}/${dir}"
  done

  echo
  echo "export __INFRA_BIN__=\"${BIN_DIR}\""
  echo "export PATH=\"\${PATH}:${dirs}\""
  echo
  echo "## additional profile"
  # shellcheck disable=SC2016
  echo 'source "${__INFRA_BIN__}/../configs/profile"'
  echo
  echo "## repository update"
  # shellcheck disable=SC2016
  echo 'sh "${__INFRA_BIN__}/util/sys/update-repo.sh" "${__INFRA_BIN__}/util/sys"'
} >"$INFRA_PROFILE_FILE"

__info__ "Infrastructure profile file [${INFRA_PROFILE_FILE}] created"

# ----------------------------------------------------------------
# Добавление в profile PATH
ERR=$(grep -i "$__CORE_STATE_DIR__" "$USER_PROFILE_FILE" -q 2>&1)
case $? in
0)
  __info__ "Path to infrastructure profile file [${INFRA_PROFILE_FILE}] has already been added"
  ;;
1)
  {
    echo ""
    echo "## adding to PATH in infrastructure utilities"
    echo "source ${INFRA_PROFILE_FILE}"
    echo ""
  } >>"$USER_PROFILE_FILE"

  __info__ "Path to infrastructure profile file [${__CORE_STATE_DIR__}] been added"
  ;;
*) __err__ "check file profile (${ERR})" ;;
esac

# ----------------------------------------------------------------
# Копирование vim.rc
SRC_FILE="${ROOT}/../../../configs/vimrc"
TRG_FILE="${HOME}/.vimrc"
OUT="Copy vimrc: $(sh "${LIB_DIR}/copy_if_need_file_to.sh" "$SRC_FILE" "$TRG_FILE" 2>&1)"
if [ $? -eq 0 ]; then
  __info__ "$OUT"
else
  __err__ "$OUT"
fi
