#!/bin/bash

set -o errexit
set -o nounset

CUR_DIR=$(dirname "$(echo "$0" | grep -E "^/" -q && echo "$0" || echo "$PWD/${0#./}")")

TOOL_IMG="tool:1.24.5"
if [ -z "$(docker image ls --filter=reference="$TOOL_IMG" -q)" ]; then
  docker build -f "${CUR_DIR}/../../docker-files/tool.dockerfile" -t "$TOOL_IMG" "."
fi

fn_lint() {
#      docker run --rm -t -v "$(pwd)":/app -w /app \
#      --user "$(id -u):$(id -g)" \
#      -v "$(go env GOCACHE):/.cache/go-build" \
#      -v "$(go env GOMODCACHE):/.cache/mod" \
#      -e GOMODCACHE=/.cache/mod \
#      -e GOCACHE=/.cache/go-build \
#      -v ~/.cache/golangci-lint:/.cache/golangci-lint -e GOLANGCI_LINT_CACHE=/.cache/golangci-lint \
#      golangci/golangci-lint:v1.64.8-alpine \
#      golangci-lint run --fix --config=.golangci.yml

  #    golangci/golangci-lint:v2.2.2 golangci-lint run

    golangci-lint run --fix -c .golangci.v2.yml
}

fn_go() {
    docker run -it --rm -w /app -v "${PWD}:/app:ro" golang:1.24.4-bookworm bash
}

fn_stats() {
  #     docker stats  --format "table{{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}"
       docker stats  --format "table{{.Name}}\t{{.CPUPerc}}"
}

fn_2fa() {
  local file="${__INFRA_LOCAL__}/totp" cmd name key line desc
  if [ ! -f "$file" ]; then
    printf "# list records\n# name key description\n\n" > "$file"
    return 0
  fi

  while IFS= read -r line; do
    name="$(echo "$line" | awk '{print $1}')"
    key="$(echo "$line" | awk '{print $2}')"
    desc="$(echo "$line" | awk 'NF >= 3 { for(i=3;i<=NF;i++) printf("%s%s", $i,(i==NF?"":" ")); print "" }')"

    [ -n "$cmd" ] && cmd="${cmd}; "
    cmd="${cmd}printf '\033[0;32m--%-15s\033[0m %6s %s\n' '${name}' \"\$(TOTP_TOKEN=${key} totp-cli instant | tr -s '[:space:]' ' ')\" '${desc}'"

  done <<< "$(grep -E '^[^[:space:]#]+' "$file")"

  docker run -it --rm -w /app \
    --user "$(id -u):$(id -g)" \
    --tmpfs /.cache:exec,mode=1777 \
    --read-only \
    --network=none \
    -v "${PWD}:/app:rw" \
    "$TOOL_IMG" bash -c "$cmd"
}

fn_tool() {
  docker run -it --rm -w /app \
    --user "$(id -u):$(id -g)" \
    --tmpfs /.cache:exec,mode=1777 \
    -v "${PWD}:/app:rw" --network host "$TOOL_IMG" bash
}

if [ "$#" -eq 0 ]; then
  functions="$(grep -Eo '^fn_[^)(]+' "$0" | sed 's/^fn_//' | tr '\n' '|')"
   echo "use: [${functions%?}]"
  exit 0
fi

"fn_$1"
