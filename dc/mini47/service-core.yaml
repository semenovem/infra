
# networks:
#   net-hq47:
#     name: net-hq47


services:
  # https://github.com/alexta69/metube
  metube:
    container_name: metube
    image: ghcr.io/alexta69/metube
    ports:
      - '8005:8081'
    volumes:
      - '/mnt/hdd2t_media/download_youtube:/downloads'
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 200M
      restart_policy:
        delay: 5s
        condition: any
      replicas: 1


  minidlna: 
    container_name: minidlna 
    build:
      context: ../../docker-files
      dockerfile: minidlna.dockerfile
    image: mini47/minidlna:1.0
    volumes: 
      - ./configs/minidlna-mini47.conf:/app/minidlna.conf:ro
      - /mnt/memfs/minidlna/cache:/app/cache:rw
      - /mnt/memfs/minidlna/logs:/app/logs:rw
      
      - /mnt/media_vol/content:/media1:ro
      - /mnt/media_vol/download_youtube:/media2/download_youtube:ro 
    command:
      - sh 
      - -c 
      - |
        minidlnad -f "/app/minidlna.conf" -P "/tmp/minidlna.pid" -R -r 
        tail -f /dev/null
    # environment:
    #   - MINIDLNA_media_dir=V,/media 
    #   - MINIDLNA_friendly_name=MiniDLNA 
    #   - MINIDLNA_merge_media_dirs=yes 
    #   - MINIDLNA_force_sort_criteria= upnp:class, upnp:originalTrackNumber, dc:title 
    #   - MINIDLNA_root_container=B
    network_mode: host
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 100m
      restart_policy:
        delay: 5s
        condition: any
      replicas: 1


  # https://github.com/hacdias/webdav
  webdav:
    container_name: webdav
    image: hacdias/webdav:v5.7.4
    volumes:
      - ./configs/wevdav-conf.yml:/config.yml:rw
      - /mnt/media_vol:/data:rw
    ports:
      - 6060:6060
    command: -c /config.yml
    user: "${UID}:${GID}"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 100m
      restart_policy:
        delay: 5s
        condition: any
      replicas: 1


  main-page:
    container_name: main-page
    image: nginx:alpine
    volumes:
      - ./configs/main-page.html:/usr/share/nginx/html/index.html:ro
    ports:
      - 80:80
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 50m
      restart_policy:
        delay: 5s
        condition: any
      replicas: 1


  smb-server:
    container_name: core-smb-server
    build:
      context: ../../docker-files
      dockerfile: samba.dockerfile
    image: home/samba:4.19.6.a
    ports:
      - 445:7070
    volumes:
      - "/mnt:/mnt:rw"
      
      # служебное
      - "./configs/samba.conf:/etc/samba/smb.conf:ro"
      - "/etc/passwd:/etc/passwd:ro"
      - "/etc/group:/etc/group:ro"
      # для логов
      - "/mnt/memfs/samba-log:/var/log/samba:rw"
    command:
      - sh
      - -c
      - |
        # добавляем пользователей
        echo -e "${__SAMBA_EVG_PASSWD__}\n${__SAMBA_EVG_PASSWD__}" | smbpasswd -s -a evg
        smbd -d=1 -F -p=7070
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
      restart_policy:
        delay: 5s
        condition: any
      replicas: 1            


  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    ports:
      # DNS Ports
      - "53:53/tcp"
      - "53:53/udp"
      # Default HTTP Port
      - "4080:80/tcp"
      # Default HTTPs Port. FTL will generate a self-signed certificate
      - "4443:443/tcp"
      # Uncomment the line below if you are using Pi-hole as your DHCP server
      #- "67:67/udp"
      # Uncomment the line below if you are using Pi-hole as your NTP server
      #- "123:123/udp"
    environment:
      # Set the appropriate timezone for your location (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones), e.g:
      TZ: 'Europe/Moscos'
      # Set a password to access the web interface. Not setting one will result in a random password being assigned
      FTLCONF_webserver_api_password: '121212'
      # If using Docker's default `bridge` network setting the dns listening mode should be set to 'all'
      FTLCONF_dns_listeningMode: 'all'
    # Volumes store your data between container upgrades
    volumes:
      # For persisting Pi-hole's databases and common configuration file
      - '/mnt/dat_vol/pihole:/etc/pihole'
      # Uncomment the below if you have custom dnsmasq config files that you want to persist. Not needed for most starting fresh with Pi-hole v6. If you're upgrading from v5 you and have used this directory before, you should keep it enabled for the first v6 container start to allow for a complete migration. It can be removed afterwards. Needs environment variable FTLCONF_misc_etc_dnsmasq_d: 'true'
      #- './etc-dnsmasq.d:/etc/dnsmasq.d'
    cap_add:
      # See https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
      # Required if you are using Pi-hole as your DHCP server, else not needed
      - NET_ADMIN
      # Required if you are using Pi-hole as your NTP client to be able to set the host's system time
      - SYS_TIME
      # Optional, if Pi-hole should get some more processing time
      - SYS_NICE
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 100m
      restart_policy:
        delay: 5s
        condition: any
      replicas: 1
       